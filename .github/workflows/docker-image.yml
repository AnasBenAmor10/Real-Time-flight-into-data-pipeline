name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  docker:
    name: Docker Login and Build into Docker Hub
    runs-on: ubuntu-latest
    needs: checkout
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spark:latest

  azure_login:
    name: Connect to Azure Cloud
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Connect and configure Azure Cloud
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

  ssh_to_azure:
    name: SSH to Azure VM
    runs-on: ubuntu-latest
    needs: azure_login
    steps:
      - name: SSH to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}

  deploy_docker_compose:
    name: Deploy Docker Compose to Azure VM
    runs-on: ubuntu-latest
    needs: ssh_to_azure
    steps:
      - uses: actions/checkout@v3

      - name: Copy repository to Azure VM
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tee /home/runner/.ssh/id_rsa > /dev/null
          echo "${{ secrets.SSH_PUBLIC_KEY }}" >> /home/runner/.ssh/authorized_keys
          chmod 600 /home/runner/.ssh/id_rsa
          chmod 644 /home/runner/.ssh/authorized_keys
      - name: Create target directory on Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p /home/${{ secrets.SSH_USERNAME }}/repository_temp"

      - name: Copy repository to Azure VM
        run: |
          scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa -r $GITHUB_WORKSPACE/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/repository_temp

      - name: Move files to final destination
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "sudo mkdir -p /home/${{ secrets.SSH_USERNAME }}/repository && sudo rsync -avh /home/${{ secrets.SSH_USERNAME }}/repository_temp/ /home/${{ secrets.SSH_USERNAME }}/repository/ && sudo rm -rf /home/${{ secrets.SSH_USERNAME }}/repository_temp"
      - name: Install Docker on Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce
            sudo usermod -aG docker ${{ secrets.SSH_USERNAME }}
            sudo systemctl enable docker
            sudo systemctl start docker

      - name: Install Docker Compose on Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compos

      - name: Run Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            newgrp docker
            cd /home/${{ secrets.SSH_USERNAME }}/repository
            docker-compose build
            docker-compose up -d
