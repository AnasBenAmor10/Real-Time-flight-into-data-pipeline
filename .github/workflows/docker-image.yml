name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  build_and_deploy:
    name: Build and Deploy real-time flight
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spark:latest

      - name: Connect and configure Azure Cloud
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: SSH to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Print the current directory
            echo "Current directory:"
            pwd

            # Print the contents of the current directory
            echo "Directory contents:"
            ls -la

            # Use the GITHUB_WORKSPACE variable to navigate to the repository directory
            cd $GITHUB_WORKSPACE

            # Ensure Docker Compose is installed
            if ! command -v docker-compose &> /dev/null
            then
                echo "docker-compose could not be found, installing..."
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Build and run Docker containers
            docker-compose build
            docker-compose up -d

            # Ensure the Python script is present
            if [ ! -f create_index_elastic.py ]; then
                echo "create_index_elastic.py not found!"
                exit 1
            fi

            python3 create_index_elastic.py

            # Run Spark consumer job
            docker-compose exec spark-master spark-submit --class consumer --total-executor-cores 4 --executor-memory 2g --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.2.4,org.elasticsearch:elasticsearch-spark-30_2.12:8.8.2,commons-httpclient:commons-httpclient:3.1 spark_consumer.py
